AWSTemplateFormatVersion: '2010-09-09'
Description: ETL Pipeline with AWS Lambda, Glue, Step Functions, API Gateway, and S3

Resources:
  # S3 Bucket
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::AccountId}-etl-pipeline-bucket-${AWS::Region}"

  # IAM Role for Lambda (Create Role First)
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole

  # Attach IAM Policy to LambdaRole Separately
  LambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaS3StepFunctionAccess
      Roles: 
        - !Ref LambdaRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
            Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"
          - Effect: Allow
            Action: states:StartExecution
            Resource: "*"  # Alternatively, replace with !GetAtt StepFunction.Arn

  # AWS Lambda Function
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: app.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.9
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: "/lambda_functions/extract_lambda/app.py" # Replace with your Lambda function location
      Timeout: 300

  # AWS Glue Role
  GlueRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action: sts:AssumeRole

  GluePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: GlueS3Access
      Roles: 
        - !Ref GlueRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
            Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"
          - Effect: Allow
            Action: glue:StartJobRun
            Resource: "*"

  # AWS Glue Job
  GlueJob:
    Type: AWS::Glue::Job
    Properties:
      Name: TransformJob
      Role: !GetAtt GlueRole.Arn
      Command:
        Name: glueetl
        ScriptLocation: !Sub "s3://${S3Bucket}/glue_scripts/script.py" # Replace with your script location

  # IAM Role for Step Functions
  StepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole

  StepFunctionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: StepFunctionAccess
      Roles: 
        - !Ref StepFunctionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
              - glue:StartJobRun
            Resource: "*"

  # AWS Step Function
  StepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StepFunctionRole.Arn
      DefinitionString: !Sub |
        {
          "StartAt": "InvokeLambda",
          "States": {
            "InvokeLambda": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
              "FunctionName": "${LambdaFunction.Arn}",
                 "Payload": {}
              },
              "Next": "RunGlueJob"
            },
            "RunGlueJob": {
              "Type": "Task",
              "Resource": "arn:aws:states:::glue:startJobRun.sync",
              "Parameters": {
                "JobName": "${GlueJob.Name}",
                "Arguments": {
                   "--destination_bucket.$": "$.Payload.bucket_name",
                  "--destination_key.$": "$.Payload.destination_key"
                   }
              },
              "End": true
            }
          }
        }

  # IAM Role for API Gateway
  ApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ApiGatewayStepFunctionAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource: !Ref StepFunction

# API Gateway (V1 - REST API)
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ETLPipelineAPI
      Description: API to trigger ETL pipeline using Step Functions
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resource (Path: /start-etl)
  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: "start-etl"
      RestApiId: !Ref ApiGateway

  # API Gateway Method (POST /start-etl)
  ApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Credentials: !GetAtt ApiGatewayRole.Arn
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:states:action/StartExecution"
        RequestTemplates:
          application/json: |
            {
              "input": "$util.escapeJavaScript($input.body)",
              "stateMachineArn": "${StepFunction}"
            }
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200

      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"

  # Deploy API Gateway
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGateway
    DependsOn: ApiMethod

  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref ApiGateway
      DeploymentId: !Ref ApiDeployment
      StageName: prod
  
